#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2024 Shiro Ninomiya
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>.
#
import sys
import os
import logging
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(parent_dir)
from twostkbd import KbdConfig

logger=logging.getLogger("gen_header")
logger.setLevel(logging.DEBUG)

class ArduinoKbdConfig(KbdConfig):
    KeyGpio={"k0":5, "k1":6, "k2":7, "k3":8, "k4":9, "k5":10,
             "f1":17, "f2":18, "f3":21,
             "alt":1, "ctrl":2, "shift":3, "ext":4}

class PrintHeader():
    def __init__(self, kbdconfig, outfd=sys.stdout):
        self.outfd=outfd
        self.kbdconfig=kbdconfig

    def file_head(self, fname: str):
        self.outfd.write("/*\n")
        self.outfd.write("This file is automatically generated.\n")
        self.outfd.write("Don't edit this file.\n")
        self.outfd.write("*/\n")
        self.outfd.write("#ifndef %s_H_\n" % fname.upper())
        self.outfd.write("#define %s_H_\n" % fname.upper())
        self.outfd.write("\n")

    def file_bottom(self):
        self.outfd.write("\n")
        self.outfd.write("#endif\n")

    def gpio_map(self):
        self.outfd.write("typedef enum {\n")
        for key in ArduinoKbdConfig.KeyGpio.keys():
            self.outfd.write("\tGPIO_%s,\n" % key.upper())
        self.outfd.write("} key_gpiomap_t;\n")
        self.outfd.write("\n")
        self.outfd.write("#define KEY_GPIO_LIST {")
        for gn in ArduinoKbdConfig.KeyGpio.values():
            self.outfd.write("%d," % gn)
        self.outfd.write("}\n")

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    logger.debug("start")
    kbdconfig=ArduinoKbdConfig()
    if kbdconfig.readconf(os.path.join("..", "config.org")):
        logger.error("can't read 'config.org'")
        sys.exit(1)
    fname="twskbino"
    outf=open(fname+".h", "w")
    pheader=PrintHeader(kbdconfig, outf)
    pheader.file_head(fname)
    pheader.gpio_map()
    pheader.file_bottom()
    outf.close()
