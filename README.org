* Two-stroke single hand keyboard
** Introduction
This is a following project to [[https://github.com/shirosf/binarykbd][Binary5 keyboard]]
The basic idea of this keyboard is as follows:
+ hit one of 6 keys twice: 36 codes
[[./photos/twostkbd_finger_maps1.png]]
+ 4 modifiers: 'shift','ctrl','alt', and one more 'ext'
[[./photos/twostkbd_finger_maps2.png]]
+ 3 function keys: 'SPACE','BACK SPACE','RETERN'
[[./photos/twostkbd_finger_maps3.png]]
All key maps can be changed by a configuration file


The total uses 13 keys.
26 of the 36 codes are used for alphabet character codes.
The other 10 are used for numerical character codes.
'ext' modifiers support symbol character codes.

** Hardware
KiCAD schematic and PCB data are in 'pcb' directory.
The HW consists of key switches, LEDs and Raspberry Pi Zero.
The circuits are mostly simple connections between GPIOs and switches.
#+ATTR_LATEX: :width 200px
#+ATTR_HTML: :width 200px
#+CAPTION: 14 keys and Raspberry Pi Zero
[[./photos/kbd_photo1.jpg]]

<2024-09-13 Fri>
Supported "Arduino Nano ESP32" to attach on PiZero connector.
#+ATTR_LATEX: :width 200px
#+ATTR_HTML: :width 200px
#+CAPTION: 13 keys and Arduin Nano ESP32
[[./photos/kbd_arduino1.jpg]]
It would be better to have both PiZero connector and Arduino Nano
connector on the PCB.
I would update the PCB design at the time of the next PCB order.
Arduino GBIO connections are defined in "key-gpio table" in "config.org"

** Arduino Software
Arduino project directory is "twskbino".
Go to the directory, then edit "Makefile" there to adjust to your hardware.
My Arduino board was an unofficial "esp32-s3" type board; to find out
"FBQN", I chose a looks-close one.
I believe that as long as it is "esp32-s3" type board "FBQN" should be okay.

To build and install from that Makefile, you need to install "arduino-cli"
and "esp32-s3" library.
Once they are ready, "make install" does all the jobs.

People who use IDE need a different way.

The way of configuration is the same as the PiZero Software.
Everything is defined in "config.org".

** PiZero Software
*** Installation
Copy following 3 files into some directory of Pi Zero.
+ twostkbd.py, create_device.sh, config.org

Using included Makefile, "make sshcopy" copies the files by 'scp'.
It needs 'pizero' defined in ssh config.

*** Run
You go to the directory of the target Pi Zero where 3 files above are copied
by ssh or a local terminal.

At the first time after booting up, 'create_device.sh' needs to be run.
It creates a USB HID device: '/dev/hidg0'.

Once the USB HID device is created, 'twostkbd.py' can run, and it feeds
keyboard events into the device.

*** systemd service
To meke the program start automatically at boot time, install "twostkbd.service"
and enable it as follows:
when you copy "twostkbd.py, create_device.sh, config.org" to the target Pi Zero,
you also copy "Makefile, twostkbd.service". Then go to the directory, and run the
following commands:
$ sudo make install
$ sudo make enable_service

When you changed the program or the config file in the working directory,
$ sudo make install
then restart the service again as next:
$ sudo systemctl restart twostkbd.service

*** Configuration
'twostkbd.py' reads 'config.org' file in the working directory.
'config.org' has the following 4 sections:
+ key-gpio table
  Each row defines,
  "schematic switch symbol","GPIO number","key name in this config file"
  Any key switch position can be changed in this table.
  E.G. swapping 'ctrl' and 'shift' in the table swaps the positions of 'ctrl' key
  and 'shift' key.

+ 6-key table
  Each row defines,
  assigned key: alphabet or number.
  '1st key' and '2nd key' combination by number, which is the number part of 'k*' name.
  modified key by the modifier key.
  The most of 'shift', 'alt', 'ctrl' modifier positions are empty.  In those cases the
  modifiers simply add the named modifier bits on the key events.

+ fkey table
  This table defines the function keys: f0 to f3.

+ multikeys table
  When more than 2 keys are pressed at the same time, it functions as "func" column
  defined function.

** License
Unless otherwise explicitly stated,
all files in this project are released under GNU General Public License Version 2.

** Development history
*** <2024-09-14 Sat>
+ Released the Arduino ESP32-S3 software.
PiZero runs a heavy Linux kernel and takes a long time to boot up.
There must be a room to improve by optimization, but I thought it
wouldn't come to my expecting level.
With Arduino HW, connecting a usb cable, it becomes ready to use in a second.
Arduino supports a very convenient USBHIDKeyboard library; thanks to it
developing the software was easy.

+ Created a new board which uses "[[http://www.kailh.com/en/Products/Ks/CS/][Kailh Choc Switch]], Red".
[[./photos/choc_sw_pink_red.jpg]]
I've been using "Pink" with 20g operation force.
It was the lightest operation force in what I could find in the market.
Actuary it is a little too light, and I often hit wrong keys inadvertently.
"Red" with 50g is better for that point.
Pursuing faster typing, however, "Pink" would be better.
I'm still wondering which I should use.

*** <2024-08-03 Sat>
Moved TAB to "multikeys table". "k1,k2,k3" is easier than "shift-f2".
"fkey table" modifier functions are all empty, modifier keys are applied on the all.
Changed MULTIKEY_GAP to 50msec from 30msec.

*** <2024-08-02 Fri>
Changed "multikeys table", "up" and "down" are swapped.

[[./photos/twostkbd_finger_maps4.png]]

[[./photos/twostkbd_finger_maps5.png]]

*** <2024-08-01 Thu>
Refactored the code.
Using "keyqueue", removed multiple timers.
Using "bounce_time" to create Button object, removed the chattering cancellation process.

*** <2024-07-21 Sun>
Tuned "multikeys table" to be convenient for cursor moves.

*** <2024-07-18 Thu>
Removed "fmode table", added "multikeys table" instead.

*** <2024-06-30 Sun>
Published [[https://youtu.be/tp5e6nVgrqI][Youtube Video]].

*** <2024-06-17 Mon>
Modifier keys are difficult to keep holding, especially ALT key.
For a solution, make hitting a modifier key be a locked status for the following
character input.
E.G.
1. hit ALT and release, this locks ALT status
2. input 'x', this becomes ALT-x, and the modifier lock status is released.
When a modifier key is held pressed and a character input happens, the modifier key
is not locked.

*** <2024-06-01 Sat>
Send modifier key events without character key events, so that 'Alt' + 'Mouse click'
type actions can work.

*** <2024-05-25 Sat>
'f0' key is difficult to press. I removed it.
Now, the function keys are 3: 'f1', 'f2' and 'f3'.
'TAB' function is covered by 'shift'+'f2'.

*** <2024-05-14 Tue>
The program basically works okay.
I started practice.

*** <2024-05-10 Fri>
Received PCB

#+OPTIONS: \n:t ^:nil
